Doreen is trying to decode a message in the form of NN strings, where each string is composed of numeric characters. To do so, she must take each string ii (where 0≤i<n0≤i<n) and put it into a group such that every string in each group has the same frequency of 0−90−9 digits as every other string within that same group. If the message contains 22 or more instances of the same exact string, she must keep 11 instance of that string and get rid of its duplicates.

Given NN messages, Doreen wants you to do 22 things:

    Find GG,the number of groups that she can form and print it on a new line.
    Let MM be the size of the largest possible group; print all groups having MM elements in the following order:
        The strings within each group must be in descending order, printed as a single line of space-separated values.
        If there are 22 or more groups of size MM, then each group must be printed in ascending order, meaning you should print them lexicographically as if they were letters. An example of lexicographically ordered numeric characters would be 1<11<111<21<11<111<2.

Note: To compare two groups G1G1 and G2G2 lexicographically, compare the elements from left to right and take the first element that doesn't match. Let the elements be e1e1 and e2e2. Now make lexicographical comparision between e1e1 and e2e2. If e1e1 is lexicographically smaller than e2e2, then the group G1G1 is also smaller than G2G2.

Input Format

The first line contains NN, the number of coded strings.
Each of the NN subsequent lines contains a string, SiSi (where 1≤i≤N1≤i≤N).

Constraints

    1≤N≤2×1041≤N≤2×104
    1≤|Si|≤20001≤|Si|≤2000, where 1≤i≤N1≤i≤N

Output Format

Print the value of GG, the number of groups formed, as your first line of output.
For each subsequent line of output you must print the groups in lexicographical order, where each MM-element group is a single line of space-separated elements in descending order.

Note: Each group must be printed on a new line, and the elements of each group must be a single line of space-separated values. Your groups must not contain duplicate strings.

Sample Input 0

11
133
213
312
331
313
123
133
24
56
5
331

Sample Output 0

5
312 213 123
331 313 133

Sample Input 1

4
1
3
10
33

Sample Output 1

4
1
10
3
33

Explanation

Sample 0:

There are 55 groups:
G1={133,331,313}G1={133,331,313} has one 11 and two 33s.
G2={213,312,123}G2={213,312,123} has one 11, one 22, and one 33.
G3={24}G3={24} has one 22 and one 44.
G4={56}G4={56} has one 55 and one 66.
G5={5}G5={5} has one 55.
The maximum size, MM, of these groups is 33, and we have two groups meeting that criteria (G1G1 and G2G2). When we sort these two groups in descending order, we get G1={331,313,133}G1={331,313,133} and G2={312,213,123}G2={312,213,123}.
Because G2G2 is lexicographically smaller than G1G1, we print the contents of G2G2 on our first line, and the contents of G1G1 on our second line.

Sample 1:

There are 44 groups:
G1={1}G1={1} has one 11.
G2={3}G2={3} has one 33.
G3={10}G3={10} has one 11 and one 00.
G4={33}G4={33} has two 33s.
The maximum size, MM, of these groups is 11, so every group will be printed in our output, and a group of 11 element is already sorted with respect to itself. The lexicographic order is G1<G3<G2<G4G1<G3<G2<G4, so we print the contents of each of those respecive groups as a new line.